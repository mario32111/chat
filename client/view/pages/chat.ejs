<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <!-- Usamos el CDN de Tailwind para asegurar que el estilo funcione en el entorno de Canvas -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Estilo simple para centrar la app en el viewport */
        .chat-container {
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }
    </style>
</head>

<body class="bg-gray-100 font-sans">

    <div class="chat-container">
        <div class="w-full max-w-md bg-white rounded-2xl shadow-xl flex flex-col h-[80vh] border border-gray-200">
            <!-- Header -->
            <div class="bg-blue-600 text-white text-center py-4 rounded-t-2xl shadow-md">
                <h1 class="text-xl font-bold">💬 Chat TCP/EJS</h1>
            </div>
            <!-- Mensajes Container -->
            <div id="messages" class="flex-1 overflow-y-auto p-4 space-y-3">
                <!-- Los mensajes se insertarán aquí por JavaScript -->
            </div>
            <!-- Input Form -->
            <form onsubmit="sendMessage(event)" class="flex border-t p-4 bg-gray-50 rounded-b-2xl">
                <input id="messageInput" type="text" placeholder="Escribe un mensaje..."
                    class="flex-1 border-2 border-gray-300 rounded-xl px-4 py-3 text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150"
                    autocomplete="off" required />
                <button type="submit"
                    class="ml-3 bg-blue-600 text-white font-semibold px-6 py-3 rounded-xl hover:bg-blue-700 transition duration-150 shadow-md transform hover:scale-[1.02]">
                    Enviar
                </button>
            </form>
        </div>
    </div>

    <script>
        const messagesContainer = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        // Define un nombre de usuario local fijo
        const LOCAL_USER_NAME = 'Tú';

        // Función para renderizar un solo mensaje en el contenedor
        function renderMessage(data) {
            // 'type' puede ser 'sent' (local) o 'received' (remoto/histórico)
            const isSelf = data.type === 'sent' || data.userName === LOCAL_USER_NAME;

            const messageDiv = document.createElement('div');
            messageDiv.className = `flex ${isSelf ? 'justify-end' : 'justify-start'}`;

            const contentDiv = document.createElement('div');
            contentDiv.className = `max-w-[75%] px-4 py-2 rounded-xl shadow-sm ${isSelf ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'
                }`;

            // Contenido: Nombre de usuario (solo si es remoto) y mensaje
            contentDiv.innerHTML = `
                ${!isSelf ? `<strong class="text-sm font-medium block mb-1">${data.userName || 'Usuario'}</strong>` : ''}
                <p class="text-sm">${data.message}</p>
            `;

            messageDiv.appendChild(contentDiv);
            messagesContainer.appendChild(messageDiv);

            // Auto-scroll al fondo
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // 🚨 Función para cargar los mensajes históricos (usando GET)
        async function loadMessages() {
            try {
                // La solicitud GET debe ir a una nueva ruta /getMessages definida en Express
                const response = await fetch('http://localhost:3000/messages');
                if (!response.ok) {
                    throw new Error('No se pudieron cargar los mensajes');
                }
                const messages = await response.json();

                // Limpiar el contenedor antes de renderizar
                messagesContainer.innerHTML = '';

                messages.forEach(msg => {
                    // Asegurar que 'type' esté presente (asume recibido si no se especifica)
                    renderMessage({ ...msg, type: msg.type || 'received' });
                });
                console.log('Mensajes históricos cargados:', messages.length);

            } catch (error) {
                console.error('Error al cargar mensajes:', error);
                renderMessage({
                    userName: 'Sistema',
                    message: 'Error: No se pudo conectar a /getMessages. ¡Define la ruta en el servidor!',
                    type: 'system'
                });
            }
        }

        // Función para enviar el mensaje (usando POST)
        async function sendMessage(event) {
            // Previene el comportamiento por defecto del formulario (recargar la página)
            event.preventDefault();

            const message = messageInput.value.trim();
            const userName = LOCAL_USER_NAME;

            if (message === '') return;

            // 1. Mostrar el mensaje inmediatamente en la interfaz (optimista)
            renderMessage({ userName, message, type: 'sent' });

            // 2. Enviar la petición al servidor Express
            try {
                const response = await fetch('/newMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    // Asegúrate de que tu ruta POST maneje el cuerpo JSON correctamente
                    body: JSON.stringify({ message, userName })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Fallo al enviar el mensaje al servidor.');
                }
                console.log('Mensaje enviado al servidor NET con éxito.');

            } catch (error) {
                console.error('Error durante la solicitud POST:', error);
                // Notificar al usuario que falló el envío
                renderMessage({
                    userName: 'Sistema',
                    message: `Fallo el envío: ${error.message}`,
                    type: 'system'
                });
            }

            messageInput.value = ''; // Limpiar el input
        }

        // Cargar los mensajes al iniciar la página
        window.onload = loadMessages;
    </script>
</body>

</html>